import React, { useState, useEffect } from "react";
import {
  FaFilePdf,
  FaDownload,
  FaComments,
  FaCalendarAlt,
  FaClock,
  FaSearch,
  FaFilter,
  FaSort,
  FaSortUp,
  FaSortDown,
  FaPlus,
  FaEllipsisV,
  FaRobot,
  FaUpload,
  FaTimes,
  FaCloudUploadAlt,
  FaSpinner,
  FaExclamationTriangle,
  FaSignOutAlt,
} from "react-icons/fa";
import "../stylesheets/yourdocumentspage.css";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/Authcontext";

const Yourdocumentspage = () => {
  const navigate = useNavigate();
  const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("all");
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const { isAuthenticated, user, token, logout } = useAuth();

  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [uploadError, setUploadError] = useState(null);

  // Sorting state
  const [sortConfig, setSortConfig] = useState({
    key: "createdAt",
    direction: "desc",
  });

  // Get token from localStorage as fallback
  const getAuthToken = () => {
    return token || localStorage.getItem("token");
  };

  // Logout handlers
  const handleLogout = () => {
    setShowLogoutConfirm(true);
  };

  // const confirmLogout = () => {
  //   // Clear tokens from localStorage
  //   localStorage.removeItem('token');
  //   localStorage.removeItem('user');

  //   // Use the logout function from AuthContext
  //   if (logout) {
  //     logout();
  //   } else {
  //     // Fallback if logout function is not available
  //     navigate("/");
  //   }
  //   setShowLogoutConfirm(false);
  // };

  const confirmLogout = () => {
    // Clear tokens from localStorage
    localStorage.removeItem("token");
    localStorage.removeItem("user");

    // Update auth state if logout function exists
    if (logout) {
      logout();
    }

    // Force navigation to main page
    setTimeout(() => {
      navigate("/", { replace: true });
    }, 100);

    setShowLogoutConfirm(false);
  };

  const cancelLogout = () => {
    setShowLogoutConfirm(false);
  };

  const handleDownload = async (doc) => {
    try {
      console.log("Starting download for document:", doc);

      // Create a comprehensive document report
      const downloadContent = `
LEGAL DOCUMENT ANALYSIS REPORT
==============================

Document Information:
-------------------
• Document Name: ${doc.DocumentName || doc.name}
• Upload Date: ${doc.uploadTime}
• Document Size: ${doc.size}
• Analysis Status: ${doc.status}
• Download Date: ${new Date().toLocaleString()}

AI Analysis Summary:
------------------
${doc.summary}

${
  doc.Dates && doc.Dates.length > 0
    ? `
Important Dates & Deadlines:
---------------------------
${doc.Dates.map(
  (date, index) => `• ${typeof date === "string" ? date : JSON.stringify(date)}`
).join("\n")}
`
    : ""
}

${
  doc.entites && doc.entites.length > 0
    ? `
Key Entities & Terms:
--------------------
${doc.entites
  .map(
    (entity, index) =>
      `• ${typeof entity === "string" ? entity : JSON.stringify(entity)}`
  )
  .join("\n")}
`
    : ""
}

${
  doc.events && doc.events.length > 0
    ? `
Timeline & Events:
-----------------
${doc.events
  .map(
    (event, index) =>
      `• ${typeof event === "string" ? event : JSON.stringify(event)}`
  )
  .join("\n")}
`
    : ""
}

Document Metadata:
----------------
• Document ID: ${doc._id}
• Created At: ${new Date(doc.createdAt).toLocaleString()}
• Document Type: ${doc.type}
• Analysis Status: ${doc.status}

---
Generated by LegalAI Document Analyzer
For inquiries or support, contact your legal advisor.
This analysis is provided for informational purposes only and does not constitute legal advice.
    `.trim();

      // Create a blob with the content
      const blob = new Blob([downloadContent], {
        type: "text/plain;charset=utf-8",
      });

      // Create a download URL
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;

      // Set the filename
      const fileName = `${(doc.DocumentName || doc.name).replace(
        ".pdf",
        ""
      )}_analysis_report.txt`;
      link.download = fileName;

      // Trigger the download
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Clean up the URL object
      window.URL.revokeObjectURL(url);

      console.log(`✅ Document analysis downloaded successfully: ${fileName}`);

      // Show success message
      alert(
        `Document analysis report downloaded successfully as "${fileName}"`
      );
    } catch (error) {
      console.error("❌ Error downloading document analysis:", error);
      alert("Failed to download document analysis. Please try again.");
    }
  };

  // Alternative: Download as PDF (more advanced)
  const handleDownloadAsPDF = async (document) => {
    try {
      // This would require a PDF generation library like jsPDF
      // For now, we'll use the text version and suggest PDF as future enhancement
      alert("PDF download feature coming soon! Using text format for now.");
      await handleDownload(document);
    } catch (error) {
      console.error("Error preparing PDF download:", error);
      alert("PDF download not available. Using text format instead.");
      await handleDownload(document);
    }
  };

  // Sort documents based on sortConfig
  const getSortedDocuments = (docs) => {
    if (!sortConfig.key) return docs;

    return [...docs].sort((a, b) => {
      let aValue = a[sortConfig.key];
      let bValue = b[sortConfig.key];

      // Handle different data types for sorting
      switch (sortConfig.key) {
        case "name":
        case "DocumentName":
          aValue = (a.name || a.DocumentName || "").toLowerCase();
          bValue = (b.name || b.DocumentName || "").toLowerCase();
          break;

        case "uploadTime":
        case "createdAt":
          // Convert to timestamp for proper date comparison - newest first
          aValue = new Date(a.createdAt || a.uploadTime).getTime();
          bValue = new Date(b.createdAt || b.uploadTime).getTime();
          break;

        case "size":
          // Extract numeric value from size string (e.g., "2.4 MB" -> 2.4)
          aValue = parseFloat(a.size) || 0;
          bValue = parseFloat(b.size) || 0;
          break;

        case "status":
          // Sort by status order: analyzed > analyzing
          const statusOrder = { analyzed: 1, analyzing: 2 };
          aValue = statusOrder[a.status] || 3;
          bValue = statusOrder[b.status] || 3;
          break;

        default:
          aValue = aValue || "";
          bValue = bValue || "";
      }

      if (aValue < bValue) {
        return sortConfig.direction === "asc" ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortConfig.direction === "asc" ? 1 : -1;
      }
      return 0;
    });
  };

  // Handle sort request
  const handleSort = (key) => {
    setSortConfig((prevConfig) => ({
      key,
      direction:
        prevConfig.key === key && prevConfig.direction === "asc"
          ? "desc"
          : "asc",
    }));
  };

  // Get sort icon for a column
  const getSortIcon = (key) => {
    if (sortConfig.key !== key) {
      return <FaSort className="h-3 w-3 text-gray-400" />;
    }
    return sortConfig.direction === "asc" ? (
      <FaSortUp className="h-3 w-3 text-blue-500" />
    ) : (
      <FaSortDown className="h-3 w-3 text-blue-500" />
    );
  };

  // Get sort label
  const getSortLabel = (key) => {
    const labels = {
      name: "Name",
      uploadTime: "Date",
      createdAt: "Date",
      size: "Size",
      status: "Status",
    };
    return labels[key] || key;
  };

  // Fetch documents from backend
  const fetchDocuments = async () => {
    try {
      setLoading(true);
      const authToken = getAuthToken();

      if (!authToken) {
        console.error("No authentication token found");
        setLoading(false);
        return;
      }

      const response = await fetch(
        "https://document-analyzer-1-backend.onrender.com/api/documents",
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          // Transform backend data to frontend format
          const formattedDocuments = data.documents.map((doc) => ({
            _id: doc._id,
            id: doc._id,
            DocumentName: doc.DocumentName,
            name: doc.DocumentName,
            uploadTime: formatUploadTime(doc.createdAt),
            status: doc.summary ? "analyzed" : "analyzing",
            summary: doc.summary || "AI is analyzing your document...",
            size: "2.4 MB",
            type: "pdf",
            filePath: doc.filePath,
            Dates: doc.Dates || [],
            entites: doc.entites || [],
            events: doc.events || [],
            createdAt: doc.createdAt,
          }));
          setDocuments(formattedDocuments);
        }
      } else if (response.status === 401) {
        console.error("Authentication failed - token may be expired");
        handleTokenExpired();
      } else {
        console.error("Failed to fetch documents:", response.status);
      }
    } catch (error) {
      console.error("Error fetching documents:", error);
    } finally {
      setLoading(false);
    }
  };

  // Fetch upcoming events
  const fetchUpcomingEvents = async () => {
    try {
      const authToken = getAuthToken();
      if (!authToken) return;

      const response = await fetch(
        "https://document-analyzer-1-backend.onrender.com/api/user/events",
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setUpcomingEvents(data.events || []);
        }
      } else if (response.status === 401) {
        handleTokenExpired();
      }
    } catch (error) {
      console.error("Error fetching events:", error);
      setUpcomingEvents([]);
    }
  };

  const handleTokenExpired = () => {
    localStorage.removeItem("token");
    alert("Your session has expired. Please login again.");
    navigate("/login");
  };

  useEffect(() => {
    if (isAuthenticated) {
      fetchDocuments();
      fetchUpcomingEvents();
    }
  }, [isAuthenticated]);

  const formatUploadTime = (timestamp) => {
    if (!timestamp) return "Recently";

    const date = new Date(timestamp);
    const now = new Date();
    const diffInMs = now - date;
    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));

    if (diffInMinutes < 1) return "Just now";
    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;
    if (diffInHours < 24) return `${diffInHours} hours ago`;
    if (diffInDays === 1) return "1 day ago";
    return `${diffInDays} days ago`;
  };

  // Apply both filter and sort
  const filteredAndSortedDocuments = getSortedDocuments(
    documents.filter((doc) => {
      const matchesSearch =
        doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        doc.summary.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesFilter =
        selectedFilter === "all" ||
        (selectedFilter === "analyzing" && doc.status === "analyzing") ||
        (selectedFilter === "analyzed" && doc.status === "analyzed");
      return matchesSearch && matchesFilter;
    })
  );

  const handleChat = (document) => {
    console.log("Opening chat for document:", document);
    navigate(`/chat/${document._id}`, {
      state: {
        document: {
          _id: document._id,
          id: document._id,
          DocumentName: document.DocumentName,
          name: document.DocumentName,
          summary: document.summary,
          Dates: document.Dates,
          entites: document.entites,
          events: document.events,
          createdAt: document.createdAt,
          uploadTime: document.uploadTime,
          size: document.size,
          type: document.type,
          status: document.status,
        },
      },
    });
  };

  const handleViewCalendar = () => {
    fetchUpcomingEvents();
    navigate("/events");
  };

  const handleUploadClick = () => {
    setShowUploadModal(true);
    setUploadError(null);
  };

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.type !== "application/pdf") {
        setUploadError("Please upload only PDF files.");
        return;
      }
      if (file.size > 10 * 1024 * 1024) {
        setUploadError("File size must be less than 10MB.");
        return;
      }
      setUploadedFile(file);
      setUploadError(null);
    }
  };

  const handleUpload = async () => {
    if (!uploadedFile) {
      setUploadError("Please select a PDF file to upload.");
      return;
    }

    setIsUploading(true);
    setUploadError(null);

    try {
      const authToken = getAuthToken();

      if (!authToken) {
        setUploadError("Authentication token not found. Please login again.");
        setIsUploading(false);
        return;
      }

      const formData = new FormData();
      formData.append("file", uploadedFile);

      console.log("Uploading file:", uploadedFile.name);

      const response = await fetch(
        "https://document-analyzer-1-backend.onrender.com/api/documents/upload-document",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
          body: formData,
        }
      );

      console.log("Upload response status:", response.status);

      if (response.ok) {
        const result = await response.json();
        console.log("Upload successful:", result);

        if (result.success) {
          const newDocument = {
            _id: result.data.documentId,
            id: result.data.documentId,
            DocumentName: result.data.file_name,
            name: result.data.file_name,
            uploadTime: "Just now",
            status: "analyzed",
            summary:
              result.data.structured_data?.summary ||
              "Document analysis complete",
            size: `${(uploadedFile.size / (1024 * 1024)).toFixed(1)} MB`,
            type: "pdf",
            Dates: result.data.structured_data?.important_dates || [],
            entites: result.data.structured_data?.key_terms || [],
            events: result.data.structured_data?.events || [],
            createdAt: new Date().toISOString(),
          };

          setDocuments((prev) => [newDocument, ...prev]);
          setShowUploadModal(false);
          setUploadedFile(null);

          alert("Document uploaded and analyzed successfully!");
          fetchUpcomingEvents();
        } else {
          throw new Error(result.message || "Upload failed");
        }
      } else {
        if (response.status === 401) {
          setUploadError("Authentication failed. Please login again.");
          handleTokenExpired();
        } else if (response.status === 413) {
          setUploadError("File too large. Please choose a smaller file.");
        } else {
          const errorData = await response
            .json()
            .catch(() => ({ message: "Upload failed" }));
          throw new Error(
            errorData.message || `Upload failed with status ${response.status}`
          );
        }
      }
    } catch (error) {
      console.error("Upload error:", error);
      setUploadError(`Upload failed: ${error.message}`);
    } finally {
      setIsUploading(false);
    }
  };

  const handleCloseModal = () => {
    setShowUploadModal(false);
    setUploadedFile(null);
    setUploadError(null);
  };

  const getFileIcon = (type) => {
    switch (type) {
      case "pdf":
        return <FaFilePdf className="w-6 h-6 text-red-500" />;
      default:
        return <FaFilePdf className="w-6 h-6 text-gray-500" />;
    }
  };

  const formatDate = (dateString) => {
    const options = { month: "long", day: "numeric", year: "numeric" };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-6xl mx-auto">
          <div className="flex justify-center items-center h-64">
            <FaSpinner className="w-8 h-8 text-blue-400 animate-spin" />
            <span className="ml-3 text-gray-600">Loading documents...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        {/* Header with Logout Button */}
        <div className="flex justify-between items-start mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Your Documents
            </h1>
            <p className="text-gray-600">
              View and manage your uploaded legal documents
            </p>
          </div>
          {/* Logout Button */}
          <button
            onClick={handleLogout}
            className="flex items-center space-x-2 bg-red-500 hover:bg-red-600 text-white rounded-lg px-4 py-2 transition duration-200 shadow-sm"
          >
            <FaSignOutAlt className="h-4 w-4" />
            <span>Logout</span>
          </button>
        </div>

        {/* Header Bar */}
        <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center">
            {/* Search Bar */}
            <div className="relative flex-1 max-w-md">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FaSearch className="h-4 w-4 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search documents..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400"
              />
            </div>

            {/* Filters and Actions */}
            <div className="flex flex-wrap gap-3 items-center">
              {/* Filter Dropdown */}
              <select
                value={selectedFilter}
                onChange={(e) => setSelectedFilter(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400"
              >
                <option value="all">All Documents</option>
                <option value="analyzed">Analyzed</option>
                <option value="analyzing">Analyzing</option>
              </select>

              {/* Sort Dropdown */}
              <div className="relative">
                <select
                  value={sortConfig.key}
                  onChange={(e) => handleSort(e.target.value)}
                  className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-400 appearance-none pr-8"
                >
                  <option value="createdAt">Sort by Date (Newest First)</option>
                  <option value="name">Sort by Name</option>
                  <option value="size">Sort by Size</option>
                  <option value="status">Sort by Status</option>
                </select>
                <div className="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
                  {getSortIcon(sortConfig.key)}
                </div>
              </div>

              {/* Upload Button */}
              <button
                onClick={handleUploadClick}
                className="flex items-center space-x-2 bg-blue-400 hover:bg-blue-500 text-white rounded-lg px-4 py-2 transition duration-200 shadow-sm hover:shadow-md"
              >
                <FaUpload className="h-4 w-4" />
                <span>Upload Document</span>
              </button>
            </div>
          </div>

          {/* Current Sort Info */}
          <div className="mt-3 flex items-center text-sm text-gray-600">
            <span>Sorted by: </span>
            <span className="font-medium ml-1">
              {getSortLabel(sortConfig.key)}
            </span>
            <span className="mx-1">
              {sortConfig.direction === "asc" ? "(A-Z)" : "(Z-A)"}
            </span>
            <span className="text-gray-400">•</span>
            <span className="ml-1">
              {filteredAndSortedDocuments.length} documents
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Documents List */}
          <div className="lg:col-span-2 space-y-6">
            {filteredAndSortedDocuments.map((doc) => (
              <div
                key={doc._id}
                className="document-card bg-white rounded-lg shadow-sm p-6 border border-gray-200 hover:border-blue-400 transition-all duration-300"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-start space-x-4 flex-1">
                    {getFileIcon(doc.type)}
                    <div className="flex-1 min-w-0">
                      <h3 className="text-lg font-semibold text-gray-900">
                        {doc.DocumentName || doc.name}
                      </h3>
                      <div className="flex items-center space-x-2 mt-1">
                        <FaClock className="h-3 w-3 text-gray-400" />
                        <span className="text-sm text-gray-500">
                          {doc.uploadTime}
                        </span>
                        <span className="text-sm text-gray-500">•</span>
                        <span className="text-sm text-gray-500">
                          {doc.size}
                        </span>
                        <span className="text-sm text-gray-500">•</span>
                        <span
                          className={`text-sm font-medium ${
                            doc.status === "analyzed"
                              ? "text-green-600"
                              : "text-blue-600"
                          }`}
                        >
                          {doc.status === "analyzed" ? "Analyzed" : "Analyzing"}
                        </span>
                      </div>
                    </div>
                  </div>
                  <button className="text-gray-400 hover:text-gray-600 transition duration-200">
                    <FaEllipsisV className="h-4 w-4" />
                  </button>
                </div>

                {/* Document Summary */}
                <div className="mb-4">
                  {doc.status === "analyzing" ? (
                    <div className="flex items-center space-x-2 text-blue-400 analyzing-pulse">
                      <FaRobot className="h-4 w-4" />
                      <p className="text-sm font-medium">{doc.summary}</p>
                    </div>
                  ) : (
                    <p className="text-gray-600 text-sm leading-relaxed">
                      {doc.summary}
                    </p>
                  )}
                </div>

                {/* Action Buttons */}
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => handleChat(doc)}
                    className="flex items-center space-x-2 text-blue-400 hover:text-blue-500 font-medium text-sm transition duration-200"
                  >
                    <FaComments className="h-4 w-4" />
                    <span>Chat</span>
                  </button>
                  <button
                    onClick={() => handleDownload(doc)}
                    className="flex items-center space-x-2 text-green-600 hover:text-green-700 font-medium text-sm transition duration-200"
                  >
                    <FaDownload className="h-4 w-4" />
                    <span>Download Analysis</span>
                  </button>
                </div>
              </div>
            ))}

            {/* Empty State */}
            {filteredAndSortedDocuments.length === 0 && (
              <div className="text-center py-12">
                <FaFilePdf className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  No documents found
                </h3>
                <p className="text-gray-600 mb-4">
                  {searchTerm
                    ? "Try adjusting your search terms"
                    : "Upload your first document to get started"}
                </p>
                <button
                  onClick={handleUploadClick}
                  className="flex items-center space-x-2 bg-blue-400 hover:bg-blue-500 text-white rounded-lg px-6 py-2 transition duration-200 mx-auto"
                >
                  <FaUpload className="h-4 w-4" />
                  <span>Upload Your First Document</span>
                </button>
              </div>
            )}
          </div>

          {/* Sidebar - Upcoming Events */}
          <div className="space-y-6">
            {/* Upcoming Events Card */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-900">
                  Upcoming Events
                </h2>
                <FaCalendarAlt className="h-5 w-5 text-blue-400" />
              </div>

              <div className="space-y-4">
                {upcomingEvents.length > 0 ? (
                  upcomingEvents.map((event, index) => (
                    <div
                      key={index}
                      className="upcoming-event bg-gray-50 rounded-lg p-4 pl-5 border-l-4 border-blue-400"
                    >
                      <h3 className="font-medium text-gray-900 text-sm mb-1">
                        {event.title || event.description}
                      </h3>
                      <p className="text-xs text-gray-500 mb-2">
                        {formatDate(event.date)} •{" "}
                        {event.document || "Document"}
                      </p>
                      <span
                        className={`inline-block px-2 py-1 text-xs rounded-full font-medium ${
                          event.type === "renewal"
                            ? "bg-green-100 text-green-800"
                            : event.type === "expiration"
                            ? "bg-red-100 text-red-800"
                            : "bg-blue-100 text-blue-800"
                        }`}
                      >
                        {event.type || "event"}
                      </span>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-4">
                    <p className="text-sm text-gray-500">No upcoming events</p>
                  </div>
                )}
              </div>

              <div className="mt-4 pt-4 border-t border-gray-200">
                <button
                  onClick={handleViewCalendar}
                  className="calendar-view flex items-center space-x-2 text-blue-400 hover:text-blue-500 font-medium text-sm w-full justify-center transition duration-200"
                >
                  <FaCalendarAlt className="h-4 w-4" />
                  <span>View Calendar</span>
                </button>
              </div>

              <div className="mt-3 text-center">
                <p className="text-sm text-gray-500">
                  {upcomingEvents.length} upcoming events found in your
                  documents
                </p>
              </div>
            </div>

            {/* Quick Stats Card */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Document Stats
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Total Documents</span>
                  <span className="font-semibold text-gray-900">
                    {documents.length}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Analyzed</span>
                  <span className="font-semibold text-green-600">
                    {documents.filter((d) => d.status === "analyzed").length}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Processing</span>
                  <span className="font-semibold text-blue-600">
                    {documents.filter((d) => d.status === "analyzing").length}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Total Size</span>
                  <span className="font-semibold text-gray-900">
                    {documents
                      .reduce((total, doc) => {
                        const size = parseFloat(doc.size) || 0;
                        return total + size;
                      }, 0)
                      .toFixed(1)}{" "}
                    MB
                  </span>
                </div>
              </div>

              {/* Quick Upload Button */}
              <div className="mt-6 pt-4 border-t border-gray-200">
                <button
                  onClick={handleUploadClick}
                  className="flex items-center justify-center space-x-2 w-full bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg px-4 py-2 transition duration-200"
                >
                  <FaUpload className="h-4 w-4" />
                  <span>Upload New Document</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Upload Modal */}
        {showUploadModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  Upload Document
                </h3>
                <button
                  onClick={handleCloseModal}
                  className="text-gray-400 hover:text-gray-600 transition duration-200"
                >
                  <FaTimes className="h-5 w-5" />
                </button>
              </div>

              <div className="mb-6">
                <p className="text-sm text-gray-600 mb-4">
                  Upload a PDF document for AI analysis. Supported file type:
                  PDF only.
                </p>

                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition duration-200">
                  <input
                    type="file"
                    id="file-upload"
                    accept=".pdf"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  <label htmlFor="file-upload" className="cursor-pointer block">
                    <FaCloudUploadAlt className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                    <p className="text-sm font-medium text-gray-900 mb-1">
                      {uploadedFile ? uploadedFile.name : "Choose PDF file"}
                    </p>
                    <p className="text-xs text-gray-500">
                      {uploadedFile
                        ? `Size: ${(uploadedFile.size / (1024 * 1024)).toFixed(
                            2
                          )} MB`
                        : "Click to browse or drag and drop"}
                    </p>
                  </label>
                </div>

                {uploadedFile && (
                  <div className="mt-3 p-3 bg-green-50 rounded-lg">
                    <p className="text-sm text-green-800 flex items-center">
                      <FaFilePdf className="w-4 h-4 mr-2" />
                      Ready to upload: {uploadedFile.name}
                    </p>
                  </div>
                )}

                {/* Upload Error Display */}
                {uploadError && (
                  <div className="mt-3 p-3 bg-red-50 rounded-lg">
                    <p className="text-sm text-red-800 flex items-center">
                      <FaExclamationTriangle className="w-4 h-4 mr-2" />
                      {uploadError}
                    </p>
                  </div>
                )}
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={handleCloseModal}
                  className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg px-4 py-2 transition duration-200"
                >
                  Cancel
                </button>
                <button
                  onClick={handleUpload}
                  disabled={!uploadedFile || isUploading}
                  className="flex-1 bg-blue-400 hover:bg-blue-500 disabled:bg-blue-300 disabled:cursor-not-allowed text-white rounded-lg px-4 py-2 transition duration-200 flex items-center justify-center"
                >
                  {isUploading ? (
                    <>
                      <FaSpinner className="animate-spin h-4 w-4 mr-2" />
                      Uploading...
                    </>
                  ) : (
                    "Upload Document"
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Logout Confirmation Modal */}
        {showLogoutConfirm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
              <div className="flex items-center space-x-3 mb-4">
                <div className="flex-shrink-0">
                  <FaSignOutAlt className="w-6 h-6 text-red-500" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    Confirm Logout
                  </h3>
                  <p className="text-sm text-gray-600 mt-1">
                    Are you sure you want to logout? You'll need to login again
                    to access your documents.
                  </p>
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={cancelLogout}
                  className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg px-4 py-2 transition duration-200"
                >
                  Cancel
                </button>
                <button
                  onClick={confirmLogout}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white rounded-lg px-4 py-2 transition duration-200 flex items-center justify-center space-x-2"
                >
                  <FaSignOutAlt className="h-4 w-4" />
                  <span>Yes, Logout</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Yourdocumentspage;
